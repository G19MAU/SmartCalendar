/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ActivityStatsDTO;
import io.swagger.model.TaskStatsDTO;
import io.swagger.model.UserDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-05-15T10:20:28.371833724Z[GMT]")
@Validated
public interface UserApi {

    @Operation(summary = "Get current user information", description = "", tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/user/me",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserDTO> userMeGet();


    @Operation(summary = "Set profile icon", description = "", tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Profile icon updated"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/user/me/profile-icon",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> userMeProfileIconPut(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Object body
);


    @Operation(summary = "Get activity statistics", description = "", tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Activity stats returned", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ActivityStatsDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/user/me/stats/activities",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ActivityStatsDTO> userMeStatsActivitiesGet();


    @Operation(summary = "Get task statistics", description = "", tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Task stats returned", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TaskStatsDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/user/me/stats/tasks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TaskStatsDTO> userMeStatsTasksGet();


    @Operation(summary = "Get profile icon", description = "", tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Profile icon data"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/user/my/profile-icon",
        method = RequestMethod.GET)
    ResponseEntity<Void> userMyProfileIconGet();

}

