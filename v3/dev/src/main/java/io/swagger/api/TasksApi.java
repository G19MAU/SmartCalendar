/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ConvertTaskRequest;
import io.swagger.model.CreateTaskRequest;
import io.swagger.model.TaskDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-05-15T10:20:28.371833724Z[GMT]")
@Validated
public interface TasksApi {

    @Operation(summary = "Get all tasks", description = "", tags={ "Tasks" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of tasks", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskDTO.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/tasks/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TaskDTO>> tasksAllGet();


    @Operation(summary = "Get tasks by category", description = "", tags={ "Tasks" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Tasks in category", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskDTO.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/tasks/category/{categoryId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TaskDTO>> tasksCategoryCategoryIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("categoryId") Integer categoryId
);


    @Operation(summary = "Create a new task", description = "", tags={ "Tasks" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Task created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/tasks/create",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TaskDTO> tasksCreatePost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateTaskRequest body
);


    @Operation(summary = "Delete a task", description = "", tags={ "Tasks" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Task deleted"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/tasks/delete/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> tasksDeleteIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id
);


    @Operation(summary = "Edit a task", description = "", tags={ "Tasks" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Task updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/tasks/edit/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<TaskDTO> tasksEditIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateTaskRequest body
);


    @Operation(summary = "Toggle task completion", description = "", tags={ "Tasks" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Completion status toggled"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/tasks/{id}/complete",
        method = RequestMethod.PUT)
    ResponseEntity<Void> tasksIdCompletePut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id
);


    @Operation(summary = "Convert task to activity", description = "", tags={ "Tasks" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Task converted to activity"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/tasks/{id}/convert",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> tasksIdConvertPost(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ConvertTaskRequest body
);


    @Operation(summary = "Get task by ID", description = "", tags={ "Tasks" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Task details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDTO.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/tasks/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TaskDTO> tasksIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id
);

}

